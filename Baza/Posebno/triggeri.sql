CREATE OR REPLACE TRIGGER TRIG_rezervacije_BI 
BEFORE INSERT ON rezervacije
    FOR EACH ROW
    WHEN(new.ID IS NULL)
BEGIN
  SELECT
    SEQ_rezervacije_ID.nextval
  INTO
    :new.ID
  FROM dual;
  
  SELECT
    SYSTIMESTAMP
  INTO
    :new.CREATED
  FROM dual;
  
  SELECT
    SYSTIMESTAMP
  INTO
    :new.UPDATED
  FROM dual;
  
    SELECT 
     NVL(:NEW.ID_CREAT, 1)
  INTO
     :NEW.ID_CREAT
  FROM DUAL;
  
  SELECT 
     NVL(:NEW.ID_UPDAT, 1)
  INTO
     :NEW.ID_UPDAT
  FROM DUAL;
END TRIG_rezervacije_BI;
/


CREATE OR REPLACE TRIGGER TRIG_rezervacije_BU 
BEFORE UPDATE ON rezervacije 
REFERENCING NEW AS NEWER OLD AS OLDER
FOR EACH ROW
BEGIN
    :NEWER.UPDATED:=SYSTIMESTAMP;
END TRIG_rezervacije_BU ;
/



CREATE OR REPLACE TRIGGER TRIG_FILMOVI_BI 
BEFORE INSERT ON FILMOVI
    FOR EACH ROW
    WHEN(new.ID IS NULL)
BEGIN
  SELECT 
  SEQ_FILMOVI_ID.nextval
  INTO
  :new.ID
  FROM dual;
  
  SELECT
    SYSTIMESTAMP
  INTO
    :new.CREATED
  FROM dual;
  
  SELECT
    SYSTIMESTAMP
  INTO
    :new.UPDATED
  FROM dual;
  
      SELECT 
     NVL(:NEW.ID_CREATED, 1)
  INTO
     :NEW.ID_CREATED
  FROM DUAL;
  
  SELECT 
     NVL(:NEW.ID_UPDATED, 1)
  INTO
     :NEW.ID_UPDATED
  FROM DUAL;
END TRIG_FILMOVI_BI;
/



CREATE OR REPLACE TRIGGER TRIG_FILMOVI_BU 
BEFORE UPDATE ON FILMOVI
REFERENCING NEW AS NEWER OLD AS OLDER
FOR EACH ROW
BEGIN
    :NEWER.UPDATED:=SYSTIMESTAMP;
END TRIG_FILMOVI_BU;
/

CREATE OR REPLACE TRIGGER TRIG_RASPORED_BI 
BEFORE INSERT ON RASPORED
FOR EACH ROW
WHEN(new.ID IS NULL)
BEGIN
    SELECT
        SEQ_RASPORED_ID.nextval
    INTO
        :new.ID
    FROM dual;
    
    SELECT
        SYSTIMESTAMP
    INTO
        :new.CREATED
    FROM dual;
    
    SELECT 
        SYSTIMESTAMP
    INTO
        :new.UPDATED
    FROM dual;
    
        SELECT 
     NVL(:NEW.ID_CREA, 1)
  INTO
     :NEW.ID_CREA
  FROM DUAL;
  
  SELECT 
     NVL(:NEW.ID_UPDA, 1)
  INTO
     :NEW.ID_UPDA
  FROM DUAL;
END TRIG_RASPORED_BI;
/
create or replace TRIGGER TRIG_RASPORED_BU 
BEFORE UPDATE ON RASPORED 
REFERENCING NEW AS NEWER OLD AS OLDER
FOR EACH ROW
BEGIN
    :NEWER.UPDATED:=SYSTIMESTAMP;
END;
/


CREATE OR REPLACE TRIGGER TRIG_KORISNICI_BI 
BEFORE INSERT ON KORISNICI 
FOR EACH ROW
WHEN(new.ID IS NULL)
BEGIN
    SELECT
        SEQ_KORISNICI_ID.nextval
    INTO
        :new.ID
    FROM dual;
    
    SELECT
        SYSTIMESTAMP
    INTO
        :new.CREATED
    FROM dual;
    
    SELECT
        SYSTIMESTAMP
    INTO
        :new.UPDATED
    FROM dual;
    
        SELECT 
     NVL(:NEW.ID_CRE, 1)
  INTO
     :NEW.ID_CRE
  FROM DUAL;
  
  SELECT 
     NVL(:NEW.ID_UPD, 1)
  INTO
     :NEW.ID_UPD
  FROM DUAL;
END TRIG_KORISNICI_BI;
/
CREATE OR REPLACE TRIGGER TRIG_KORISNICI_BU 
BEFORE UPDATE ON KORISNICI
REFERENCING NEW AS NEWER OLD AS OLDER
FOR EACH ROW
BEGIN
    :NEWER.UPDATED:=SYSTIMESTAMP;
END TRIG_KORISNICI_BU;
/

create or replace TRIGGER TRIG_rezervacije_BI 
BEFORE INSERT ON rezervacije
    FOR EACH ROW
    WHEN(new.ID IS NULL)
BEGIN
  SELECT
    SEQ_rezervacije_ID.nextval
  INTO
    :new.ID
  FROM dual;

  SELECT
    SYSTIMESTAMP
  INTO
    :new.CREATED
  FROM dual;

  SELECT
    SYSTIMESTAMP
  INTO
    :new.UPDATED
  FROM dual;
  
      SELECT 
     NVL(:NEW.ID_CREAT, 1)
  INTO
     :NEW.ID_CREAT
  FROM DUAL;
  
  SELECT 
     NVL(:NEW.ID_UPDAT, 1)
  INTO
     :NEW.ID_UPDAT
  FROM DUAL;
END TRIG_rezervacije_BI;
/

create or replace TRIGGER TRIG_rezervacije_BU 
BEFORE UPDATE ON rezervacije 
REFERENCING NEW AS NEWER OLD AS OLDER
FOR EACH ROW
BEGIN
    :NEWER.UPDATED:=SYSTIMESTAMP;
END TRIG_rezervacije_BU ;
/